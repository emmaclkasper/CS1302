package edu.uga.cs1302.mp3files;

import java.io.BufferedInputStream;
import java.io.FileInputStream;
import java.util.Map;
import java.util.Scanner;

import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.AudioFileFormat;
import javazoom.jl.player.*;

/**
 * The Class MP3File, an MP3 class object represents the information about a
 * single MP3 file on a disk. It can also play the MP3 file
 * 
 * @author Emma Kasper
 */
public class MP3File {

	private String pathname = ""; // pathname
	private String author = ""; // author
	private String album = ""; // album
        private String date = "";// date
	private String title = "";// title
    
	/**
	 * Instantiates a new empty MP3 file object
	 */
	public MP3File() {

		pathname = "Pathname not given";
		author = "Author not given";
		album = "Album not given";
		date = "Date not given";
		title = "Title not given";
	}

	/**
	 * Instantiates a new MP3 file object and sets the path
	 *
	 * @param pathname the provided pathname by the user
	 */
	public MP3File(String pathname) {
	    this.pathname = pathname;

			try{

			 FileInputStream fis = new FileInputStream(this.pathname);
			 BufferedInputStream bis = new BufferedInputStream(fis);
			 AudioFileFormat mpegFormat = AudioSystem.getAudioFileFormat(bis);
			 Map properties = mpegFormat.properties();


				this.author = (String) properties.get("author");
		  
				this.album = (String) properties.get("album");
		       	
				this.date = (String) properties.get("date");
			
				this.title = (String) properties.get("title");
			

		} catch (ArrayIndexOutOfBoundsException oobe) {
			System.err.println("Usage: java PrintMP3Properties file.mp3");
		} catch (Exception e) {
			System.out.println(e);
		}
	}

	// getters and setters

	/**
	 * Gets the path.
	 *
	 * @return the path
	 */
	public String getPath() {

		return pathname;

	}

	/**
	 * Sets the path.
	 *
	 * @param pathname sets the new path
	 */
	public void setPath(String pathname) {
	       
	    this.pathname = pathname;
		

	}

	/**
	 * Gets the author.
	 *
	 * @return the author
	 */
	public String getAuthor() {

		return author;

	}

	/**
	 * Sets the author.
	 *
	 * @param author sets the new author
	 */
	public void setAuthor(String author) {
	    this.author = author;

	}

	/**
	 * Gets the album.
	 *
	 * @return the album
	 */
	public String getAlbum() {

		return album;

	}

	/**
	 * Sets the album.
	 *
	 * @param album sets the new album
	 */
	public void setAlbum(String album) {
		
			this.album = album;
		

	}

	/**
	 * Gets the date.
	 *
	 * @return the date
	 */
	public String getDate() {

		return date;

	}

	/**
	 * Sets the date.
	 *
	 * @param date sets the new date
	 */
	public void setDate(String date) {
	       
			this.date = date;
		

	}

	/**
	 * Gets the title.
	 *
	 * @return the title
	 */
	public String getTitle() {

		return title;

	}

	/**
	 * Sets the title.
	 *
	 * @param title sets the new title
	 */
	public void setTitle(String title) {
	       
			this.title = title;
		

	}

	/*
	 * Prints file information
	 * 
	 * @see java.lang.Object#toString()
	 */
	public String toString() {

		String information = "Information about: " + pathname + "\n" + "-------------------------- " + "\n" + "Author: "
				+ author + "\n" + "Album:  " + album + "\n" + "Title:  " + title+ "\n" + "Date:   "
				+ date + "\n";

		return information;
	}

	/*
	 * Evaluates if an object is an instance of MP3File
	 * 
	 * @param anObject the object to be evaluated as an instance of MP3File
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	public boolean equals(Object anObject) {
		boolean equals = true;

		if (anObject instanceof MP3File) {
			if (author.equals(((MP3File) anObject).getAuthor()) && album.equals(((MP3File) anObject).getAlbum())
					&& title.equals(((MP3File) anObject).getTitle()) && date.equals(((MP3File) anObject).getDate())) {
				equals = true;
			}

			else {
				equals = false;
			}

		} else
			equals = false;
		return equals;
	}

	/**
	 * Plays the current file
	 */
	public void play() {

		Scanner input = new Scanner(System.in);
		boolean stop = false;
		String selection = null;
		MP3 player = new MP3Player();
		input = new Scanner(System.in);


		// a simple illustration on how to play several songs
		while (!stop) {

			// start playing this file
			player.play(this.getPath());
			// but wait until it finishes, or is interrupted by the user
			player.waitForPlaybackFinish();

			// now, check what to do next
			System.out.println("RunMP3Player: Enter 'q' to quit the loop, or any other char to continue");

			selection = input.next();
			if (selection.equals("q"))
				stop = true;
		}

	}

}
